--- a/libs/url/CMakeLists.txt
+++ b/libs/url/CMakeLists.txt
@@ -14,7 +14,7 @@
 # Project
 #
 #-------------------------------------------------
-cmake_minimum_required(VERSION 3.8)
+cmake_minimum_required(VERSION 3.10)
 set(BOOST_URL_VERSION 2)
 if (BOOST_SUPERPROJECT_VERSION)
     set(BOOST_URL_VERSION ${BOOST_SUPERPROJECT_VERSION})

--- a/libs/filesystem/CMakeLists.txt
+++ a/libs/filesystem/CMakeLists.txt
@@ -7,7 +7,7 @@
 # NOTE: CMake support for Boost.Filesystem is currently experimental at best
 #       and the interface is likely to change in the future
 
-cmake_minimum_required(VERSION 3.5)
+cmake_minimum_required(VERSION 3.10)
 project(BoostFilesystem VERSION "${BOOST_SUPERPROJECT_VERSION}" LANGUAGES CXX)
 
 include(CheckCXXSourceCompiles)

--- a/libs/asio/include/boost/asio/ssl/detail/impl/engine.ipp
+++ b/libs/asio/include/boost/asio/ssl/detail/impl/engine.ipp
@@ -337,7 +337,11 @@ engine::want engine::perform(int (engine::* op)(void*, std::size_t),
   }
   else
   {
+#if defined(BOOST_ASIO_USE_WOLFSSL)
+    ec = boost::system::error_code(ssl_error, boost::asio::error::get_ssl_category());
+#else
     ec = boost::asio::ssl::error::unexpected_result;
+#endif
     return want_nothing;
   }
 }

--- a/libs/asio/include/boost/asio/ssl/impl/error.ipp
+++ b/libs/asio/include/boost/asio/ssl/impl/error.ipp
@@ -39,6 +39,9 @@ public:
     const char* reason = ::ERR_reason_error_string(value);
     if (reason)
     {
+#if defined(BOOST_ASIO_USE_WOLFSSL)
+      return reason;
+#endif
       const char* lib = ::ERR_lib_error_string(value);
 #if (OPENSSL_VERSION_NUMBER < 0x30000000L)
       const char* func = ::ERR_func_error_string(value);
